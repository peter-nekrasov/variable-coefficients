function [ch0,ch1] = struveR(z)
%%%%%%%%%
%
%    this function returns J_0(z)+i*\bf{H}_0(z) and
%       J_1(z)+i*\bf{H}_1(z) for z in the upper half plane.
%       It has not been thoroughly tested and debugged.
%
%%%%%%%%

    sz = size(z);
    z = z(:);
    iloc = find(abs(z)<95);
    ifar = find(abs(z)>=95);
    ch0 = zeros(size(z));
    ch1 = zeros(size(z));
    [ch0(iloc),ch1(iloc)] = eval_struve_loc(z(iloc));
    [ch0(ifar),ch1(ifar)] = eval_struve_asymp(z(ifar));
    
    ch0 = reshape(ch0,sz);
    ch1 = reshape(ch1,sz);

end

function [ch0,ch1] = eval_struve_loc(z)

        if (numel(z) == 0)
            ch0 = zeros(size(z));
            ch1 = zeros(size(z));
            return
        end

%c        
%c        
%c  Data for  37 nodes
%c        
%c        Nodes:
%c     
        roots = [...
     0.87186936754544766250253027960067061E-03,
     0.46139685912320967303416540407238922E-02,
     0.11403724801942921356137834302761037E-01,
     0.21273869799713696933641832975796249E-01,
     0.34193590050116829966579764433743035E-01,
     0.50066369794921376232043513262965254E-01,
     0.68744840661990788702429710889821597E-01,
     0.90048072402715190852258825130292457E-01,
     0.11377592663404126825938959160714100E0,
     0.13971978110961365171254749916299551E0,
     0.16767014236115274323005600121328955E0,
     0.19742177893584148950155333084573482E0,
     0.22877691807308378517723923313666051E0,
     0.26154695322712432159879164746999082E0,
     0.29555302753335277446131742777185285E0,
     0.33062578374754158104960283618100391E0,
     0.36660450216541491786235920888991686E0,
     0.40333578530448759280923922177159180E0,
     0.44067189263979230096015237792322106E0,
     0.47846878035451058360863654925350577E0,
     0.51658385874506676265637066649992671E0,
     0.55487344175168025198877443769071049E0,
     0.59318982695586911097452516857230420E0,
     0.63137790840299165793725647143822823E0,
     0.66927118776716681032991184652397348E0,
     0.70668701278815968450670916337028782E0,
     0.74342084125637165388666138194419335E0,
     0.77923931924677709974401783652563375E0,
     0.81387200770526215128960217429540181E0,
     0.84700176082852057052869742284312294E0,
     0.87825418155746073449521778714979575E0,
     0.90718746700691083026622346312383955E0,
     0.93328559201548523410470858115116893E0,
     0.95596033956534706418672743248507695E0,
     0.97457068671996242739973875100248174E0,
     0.98846928432620062697670165425220407E0,
     0.99708064081719044882055745173383494E0];
%c        
%c        Weights:
%c     
        weights = [...
     0.22400793162522620028337342576607655E-02,
     0.52562958545833668597087967858577443E-02,
     0.83292445719813523846209588396397472E-02,
     0.11405895332021561946770211306887681E-01,
     0.14417175501532344966893665060168281E-01,
     0.17303524427299038655530608551526178E-01,
     0.20023022646990755626055401940839219E-01,
     0.22549907244778405352983171625076791E-01,
     0.24870905511862094728629286906339806E-01,
     0.26981803593965940026041345109116380E-01,
     0.28884661448585884128859085797934419E-01,
     0.30585621981978769080658948395974632E-01,
     0.32093212833515847024838346971574105E-01,
     0.33417052689694834454821729836007566E-01,
     0.34566884458490632207669519552867110E-01,
     0.35551863517485979214669339016958224E-01,
     0.36380034954008166378022870213703710E-01,
     0.37057940602559844694600638048292195E-01,
     0.37590304080249571384582448446974135E-01,
     0.37979748759608503619743452686633684E-01,
     0.38226508779578309155122146782475474E-01,
     0.38328096296860372305947506587248322E-01,
     0.38278889190620506125746342362630497E-01,
     0.38069602854625530975733505636189940E-01,
     0.37686608908088999340201452402700335E-01,
     0.37111065688452326336389956002501603E-01,
     0.36317836731785215519238677820354814E-01,
     0.35274207268375168408050987036082763E-01,
     0.33938490583125740266040378837852324E-01,
     0.32258792010039490880959886652098818E-01,
     0.30172542060499594231165932685367417E-01,
     0.27608011550870843420481696161406415E-01,
     0.24489904826860435351837466865555922E-01,
     0.20751994230408540299014138363576147E-01,
     0.16359482915027751299740298894463263E-01,
     0.11340067141542798168025906208432430E-01,
     0.58136209987079405666670968754469649E-02];
%c        


        ZR = z*roots.';
        EX = exp(1i*ZR);
        w0 = weights./sqrt(1-roots.*roots);
        w1 = weights.*sqrt(1-roots.*roots);

        zz = exp(1i*z)-1;
        s = sum(w0.*roots);
        sw = sum(w0);
        ch0 = EX*w0;
        ch0 = sum(ch0,2);
        ch0 = ch0 - zz*s-sw;
        ch0 = 2/pi*(ch0 + pi/2+zz);

        ch1 = EX*w1;
        ch1 = sum(ch1,2);
        ch1 = 2/pi*(ch1.*z);

end

function [ch0,ch1] = eval_struve_asymp(z)

        zv = -z;
        eps = 1.0d-15;


        ch0 = 2/pi./zv;
        ct  = ch0;

        ch1 = 2/pi;
        ct1 = ch1;

        r1 = abs(ct);

        ifdone = ones(size(zv));

        for i=1:1000
            ct =-ct./zv./zv/4/i/i.* ...
               (2*i*(2*i-1)).^2;

            ct1 =-ct1./zv./zv*4.* ...
               ((i-1)^2-1/4);

            r2 = abs(ct);

            ifdone = ifdone.*(r2<=r1);
            ifdone = ifdone.*(r2>eps);

            if(sum(ifdone) == 0)
                break
            end
            ch0 = ch0 + ct;
            ch1 = ch1 + ct1;
            r1 = r2;
        end

        h0 = besselh(0,z);
        h1 = besselh(1,z);
        %%% fishy
        indsp = find(real(zv)>0);
        indsn = find(real(zv)<=0);
        ch0(indsp) = ch0(indsp)-1i*h0(indsp);
        ch0(indsn) = ch0(indsn)+1i*h0(indsn);
        ch1(indsp) = ch1(indsp)+1i*h1(indsp);
        ch1(indsn) = ch1(indsn)-1i*h1(indsn);

        ch0 = -1i*ch0;
        ch1 =  1i*ch1;
        ch0(ifdone==1) = NaN;
        ch1(ifdone==1) = NaN;

end
